// Code generated by mockery v2.53.0. DO NOT EDIT.

package i18n

import mock "github.com/stretchr/testify/mock"

// MockMessageLocalize is an autogenerated mock type for the MessageLocalize type
type MockMessageLocalize struct {
	mock.Mock
}

type MockMessageLocalize_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageLocalize) EXPECT() *MockMessageLocalize_Expecter {
	return &MockMessageLocalize_Expecter{mock: &_m.Mock}
}

// Localize provides a mock function with given fields: messageID, params
func (_m *MockMessageLocalize) Localize(messageID string, params map[string]interface{}) (string, error) {
	ret := _m.Called(messageID, params)

	if len(ret) == 0 {
		panic("no return value specified for Localize")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (string, error)); ok {
		return rf(messageID, params)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(messageID, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(messageID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageLocalize_Localize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Localize'
type MockMessageLocalize_Localize_Call struct {
	*mock.Call
}

// Localize is a helper method to define mock.On call
//   - messageID string
//   - params map[string]interface{}
func (_e *MockMessageLocalize_Expecter) Localize(messageID interface{}, params interface{}) *MockMessageLocalize_Localize_Call {
	return &MockMessageLocalize_Localize_Call{Call: _e.mock.On("Localize", messageID, params)}
}

func (_c *MockMessageLocalize_Localize_Call) Run(run func(messageID string, params map[string]interface{})) *MockMessageLocalize_Localize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockMessageLocalize_Localize_Call) Return(_a0 string, _a1 error) *MockMessageLocalize_Localize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageLocalize_Localize_Call) RunAndReturn(run func(string, map[string]interface{}) (string, error)) *MockMessageLocalize_Localize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageLocalize creates a new instance of MockMessageLocalize. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageLocalize(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageLocalize {
	mock := &MockMessageLocalize{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
