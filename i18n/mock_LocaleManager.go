// Code generated by mockery v2.53.0. DO NOT EDIT.

package i18n

import mock "github.com/stretchr/testify/mock"

// MockLocaleManager is an autogenerated mock type for the Bundle type
type MockLocaleManager struct {
	mock.Mock
}

type MockLocaleManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocaleManager) EXPECT() *MockLocaleManager_Expecter {
	return &MockLocaleManager_Expecter{mock: &_m.Mock}
}

// Localize provides a mock function with given fields: messageID, params
func (_m *MockLocaleManager) Localize(messageID string, params map[string]interface{}) (string, error) {
	ret := _m.Called(messageID, params)

	if len(ret) == 0 {
		panic("no return value specified for Localize")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (string, error)); ok {
		return rf(messageID, params)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(messageID, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(messageID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocaleManager_Localize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Localize'
type MockLocaleManager_Localize_Call struct {
	*mock.Call
}

// Localize is a helper method to define mock.On call
//   - messageID string
//   - params map[string]interface{}
func (_e *MockLocaleManager_Expecter) Localize(messageID interface{}, params interface{}) *MockLocaleManager_Localize_Call {
	return &MockLocaleManager_Localize_Call{Call: _e.mock.On("Localize", messageID, params)}
}

func (_c *MockLocaleManager_Localize_Call) Run(run func(messageID string, params map[string]interface{})) *MockLocaleManager_Localize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLocaleManager_Localize_Call) Return(_a0 string, _a1 error) *MockLocaleManager_Localize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocaleManager_Localize_Call) RunAndReturn(run func(string, map[string]interface{}) (string, error)) *MockLocaleManager_Localize_Call {
	_c.Call.Return(run)
	return _c
}

// LocalizeWithLang provides a mock function with given fields: langKey, messageID, params
func (_m *MockLocaleManager) LocalizeWithLang(langKey string, messageID string, params map[string]interface{}) (string, error) {
	ret := _m.Called(langKey, messageID, params)

	if len(ret) == 0 {
		panic("no return value specified for LocalizeWithLang")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) (string, error)); ok {
		return rf(langKey, messageID, params)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) string); ok {
		r0 = rf(langKey, messageID, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}) error); ok {
		r1 = rf(langKey, messageID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocaleManager_LocalizeWithLang_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalizeWithLang'
type MockLocaleManager_LocalizeWithLang_Call struct {
	*mock.Call
}

// LocalizeWithLang is a helper method to define mock.On call
//   - langKey string
//   - messageID string
//   - params map[string]interface{}
func (_e *MockLocaleManager_Expecter) LocalizeWithLang(langKey interface{}, messageID interface{}, params interface{}) *MockLocaleManager_LocalizeWithLang_Call {
	return &MockLocaleManager_LocalizeWithLang_Call{Call: _e.mock.On("LocalizeWithLang", langKey, messageID, params)}
}

func (_c *MockLocaleManager_LocalizeWithLang_Call) Run(run func(langKey string, messageID string, params map[string]interface{})) *MockLocaleManager_LocalizeWithLang_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLocaleManager_LocalizeWithLang_Call) Return(_a0 string, _a1 error) *MockLocaleManager_LocalizeWithLang_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocaleManager_LocalizeWithLang_Call) RunAndReturn(run func(string, string, map[string]interface{}) (string, error)) *MockLocaleManager_LocalizeWithLang_Call {
	_c.Call.Return(run)
	return _c
}

// TryLocalize provides a mock function with given fields: messageID, params
func (_m *MockLocaleManager) TryLocalize(messageID string, params map[string]interface{}) string {
	ret := _m.Called(messageID, params)

	if len(ret) == 0 {
		panic("no return value specified for TryLocalize")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(messageID, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLocaleManager_TryLocalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryLocalize'
type MockLocaleManager_TryLocalize_Call struct {
	*mock.Call
}

// TryLocalize is a helper method to define mock.On call
//   - messageID string
//   - params map[string]interface{}
func (_e *MockLocaleManager_Expecter) TryLocalize(messageID interface{}, params interface{}) *MockLocaleManager_TryLocalize_Call {
	return &MockLocaleManager_TryLocalize_Call{Call: _e.mock.On("TryLocalize", messageID, params)}
}

func (_c *MockLocaleManager_TryLocalize_Call) Run(run func(messageID string, params map[string]interface{})) *MockLocaleManager_TryLocalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLocaleManager_TryLocalize_Call) Return(_a0 string) *MockLocaleManager_TryLocalize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocaleManager_TryLocalize_Call) RunAndReturn(run func(string, map[string]interface{}) string) *MockLocaleManager_TryLocalize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocaleManager creates a new instance of MockLocaleManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocaleManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocaleManager {
	mock := &MockLocaleManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
