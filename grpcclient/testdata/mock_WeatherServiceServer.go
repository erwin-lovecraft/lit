// Code generated by mockery v2.49.1. DO NOT EDIT.

package testdata

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockWeatherServiceServer is an autogenerated mock type for the WeatherServiceServer type
type MockWeatherServiceServer struct {
	mock.Mock
}

// GetWeatherInfo provides a mock function with given fields: _a0, _a1
func (_m *MockWeatherServiceServer) GetWeatherInfo(_a0 context.Context, _a1 *WeatherRequest) (*WeatherResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherInfo")
	}

	var r0 *WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *WeatherRequest) (*WeatherResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *WeatherRequest) *WeatherResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WeatherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *WeatherRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamWeather provides a mock function with given fields: _a0, _a1
func (_m *MockWeatherServiceServer) StreamWeather(_a0 *WeatherRequest, _a1 grpc.ServerStreamingServer[WeatherDetail]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StreamWeather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*WeatherRequest, grpc.ServerStreamingServer[WeatherDetail]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mustEmbedUnimplementedWeatherServiceServer provides a mock function with given fields:
func (_m *MockWeatherServiceServer) mustEmbedUnimplementedWeatherServiceServer() {
	_m.Called()
}

// NewMockWeatherServiceServer creates a new instance of MockWeatherServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherServiceServer {
	mock := &MockWeatherServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
