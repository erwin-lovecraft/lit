// Code generated by mockery v2.49.1. DO NOT EDIT.

package testdata

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockWeatherServiceClient is an autogenerated mock type for the WeatherServiceClient type
type MockWeatherServiceClient struct {
	mock.Mock
}

// GetWeatherInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockWeatherServiceClient) GetWeatherInfo(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherInfo")
	}

	var r0 *WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *WeatherRequest, ...grpc.CallOption) (*WeatherResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *WeatherRequest, ...grpc.CallOption) *WeatherResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WeatherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *WeatherRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamWeather provides a mock function with given fields: ctx, in, opts
func (_m *MockWeatherServiceClient) StreamWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WeatherDetail], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StreamWeather")
	}

	var r0 grpc.ServerStreamingClient[WeatherDetail]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *WeatherRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[WeatherDetail], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *WeatherRequest, ...grpc.CallOption) grpc.ServerStreamingClient[WeatherDetail]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[WeatherDetail])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *WeatherRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWeatherServiceClient creates a new instance of MockWeatherServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherServiceClient {
	mock := &MockWeatherServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
