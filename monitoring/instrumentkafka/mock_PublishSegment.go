// Code generated by mockery v2.53.0. DO NOT EDIT.

package instrumentkafka

import (
	mock "github.com/stretchr/testify/mock"
	trace "go.opentelemetry.io/otel/trace"
)

// MockPublishSegment is an autogenerated mock type for the PublishSegment type
type MockPublishSegment struct {
	mock.Mock
}

type MockPublishSegment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublishSegment) EXPECT() *MockPublishSegment_Expecter {
	return &MockPublishSegment_Expecter{mock: &_m.Mock}
}

// End provides a mock function with given fields: partition, offset, sendErr
func (_m *MockPublishSegment) End(partition int32, offset int64, sendErr error) {
	_m.Called(partition, offset, sendErr)
}

// MockPublishSegment_End_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'End'
type MockPublishSegment_End_Call struct {
	*mock.Call
}

// End is a helper method to define mock.On call
//   - partition int32
//   - offset int64
//   - sendErr error
func (_e *MockPublishSegment_Expecter) End(partition interface{}, offset interface{}, sendErr interface{}) *MockPublishSegment_End_Call {
	return &MockPublishSegment_End_Call{Call: _e.mock.On("End", partition, offset, sendErr)}
}

func (_c *MockPublishSegment_End_Call) Run(run func(partition int32, offset int64, sendErr error)) *MockPublishSegment_End_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int64), args[2].(error))
	})
	return _c
}

func (_c *MockPublishSegment_End_Call) Return() *MockPublishSegment_End_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublishSegment_End_Call) RunAndReturn(run func(int32, int64, error)) *MockPublishSegment_End_Call {
	_c.Run(run)
	return _c
}

// SpanContext provides a mock function with no fields
func (_m *MockPublishSegment) SpanContext() trace.SpanContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SpanContext")
	}

	var r0 trace.SpanContext
	if rf, ok := ret.Get(0).(func() trace.SpanContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(trace.SpanContext)
	}

	return r0
}

// MockPublishSegment_SpanContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpanContext'
type MockPublishSegment_SpanContext_Call struct {
	*mock.Call
}

// SpanContext is a helper method to define mock.On call
func (_e *MockPublishSegment_Expecter) SpanContext() *MockPublishSegment_SpanContext_Call {
	return &MockPublishSegment_SpanContext_Call{Call: _e.mock.On("SpanContext")}
}

func (_c *MockPublishSegment_SpanContext_Call) Run(run func()) *MockPublishSegment_SpanContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublishSegment_SpanContext_Call) Return(_a0 trace.SpanContext) *MockPublishSegment_SpanContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublishSegment_SpanContext_Call) RunAndReturn(run func() trace.SpanContext) *MockPublishSegment_SpanContext_Call {
	_c.Call.Return(run)
	return _c
}

// SpanID provides a mock function with no fields
func (_m *MockPublishSegment) SpanID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SpanID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPublishSegment_SpanID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpanID'
type MockPublishSegment_SpanID_Call struct {
	*mock.Call
}

// SpanID is a helper method to define mock.On call
func (_e *MockPublishSegment_Expecter) SpanID() *MockPublishSegment_SpanID_Call {
	return &MockPublishSegment_SpanID_Call{Call: _e.mock.On("SpanID")}
}

func (_c *MockPublishSegment_SpanID_Call) Run(run func()) *MockPublishSegment_SpanID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublishSegment_SpanID_Call) Return(_a0 string) *MockPublishSegment_SpanID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublishSegment_SpanID_Call) RunAndReturn(run func() string) *MockPublishSegment_SpanID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublishSegment creates a new instance of MockPublishSegment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublishSegment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublishSegment {
	mock := &MockPublishSegment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
